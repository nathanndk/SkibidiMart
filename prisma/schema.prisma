// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleUser {
  SUPERADMIN
  CUSTOMER
}

enum ProductStock {
  READY
  PREORDER
}

enum StatusOrder {
  PENDING
  SUCCESS
  FAILED
}

model Follow {
  following_user_id Int
  followed_user_id  Int
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  followingUser     User     @relation("followingUser", fields: [following_user_id], references: [id])
  followedUser      User     @relation("followedUser", fields: [followed_user_id], references: [id])

  @@id([following_user_id, followed_user_id])
}

model User {
  id         Int       @id @default(autoincrement())
  username   String    @db.VarChar(255)
  role       String    @default("CUSTOMER") @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  name       String    @db.VarChar(255)
  email      String    @db.VarChar(255)
  password   String    @db.VarChar(255)
  type       RoleUser
  posts      Post[]
  following  Follow[]  @relation("followingUser")
  followed   Follow[]  @relation("followedUser")
  orders     Order[]
  Session    Session[]
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Post {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  body       String   @map("text")
  user_id    Int
  status     String   @db.VarChar(255)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id])
}

model Brand {
  id         Int       @id @default(autoincrement())
  logo       String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Location {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  products   Product[]
}

model Product {
  id          Int              @id @default(autoincrement())
  brand_id    Int
  category_id Int
  location_id Int
  name        String           @db.VarChar(255)
  description String           @db.Text
  price       BigInt           @db.BigInt
  stock       ProductStock
  images      String           @db.VarChar(255)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  brand       Brand            @relation(fields: [brand_id], references: [id])
  category    Category         @relation(fields: [category_id], references: [id])
  location    Location         @relation(fields: [location_id], references: [id])
  orders      OrdersProducts[]
}

model Order {
  id         Int              @id @default(autoincrement())
  code       String           @unique @db.Text
  user_id    Int
  total      BigInt           @db.BigInt
  status     StatusOrder
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  user       User             @relation(fields: [user_id], references: [id])
  details    OrdersDetail[]
  products   OrdersProducts[]
}

model OrdersDetail {
  id          Int      @id @default(autoincrement())
  order_id    Int      @unique
  name        String   @db.VarChar(255)
  address     String   @db.VarChar(255)
  postal_code String   @db.VarChar(255)
  notes       String?  @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  order       Order    @relation(fields: [order_id], references: [id])
}

model OrdersProducts {
  id         Int      @id @default(autoincrement())
  product_id Int
  order_id   Int
  subtotal   Int
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [product_id], references: [id])
  order      Order    @relation(fields: [order_id], references: [id])
}
